library(lubridate)
proj1_df1<- proj1_df %>%
filter(Date == "2/2/2007" | Date == "1/2/2007") %>%
mutate(Date_long  = paste(Date, Time, sep =" "))
proj1_df1$Datelt<- parse_date_time(proj1_df1$Date_long, order = "dmy  hms" )
# plot 3 energy metering
png("plot3.png", width = 480, height = 480)
yrange<- range(c( proj1_df1$Sub_metering_1, proj1_df1$Sub_metering_2, proj1_df1$Sub_metering_3))
plot(x=proj1_df1$Datelt,y= proj1_df1$Sub_metering_1, ylim = yrange, col = "black", type = "l", ylab ="Energy sub metering", xlab ="")
lines(x= proj1_df1$Datelt, y=proj1_df1$Sub_metering_2, type ="l", col = "red")
lines(x= proj1_df1$Datelt,y=proj1_df1$Sub_metering_3, type = "l" ,col ="blue")
legend('topright',legend= c("Sub meter 1", "Sub meter 2", "Sub meter 3"), lty= c(1,1,1), lwd =c(2,2,2), col = c("black", "red", "blue"), bty ="n")
dev.off()
proj1_df<- read.table("household_power_consumption.txt", sep = ";", na.strings = "?", header = TRUE, stringsAsFactors=FALSE)
library(dplyr)
library(lubridate)
proj1_df1<- proj1_df %>%
filter(Date == "2/2/2007" | Date == "1/2/2007") %>%
mutate(Date_long  = paste(Date, Time, sep =" "))
proj1_df1$Datelt<- parse_date_time(proj1_df1$Date_long, order = "dmy  hms" )
# plot 4  multiple plot
# create png file
png("plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
with(proj1_df1, plot(x= Datelt, y= Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "", type = "l" ))
with(proj1_df1, plot(x= Datelt, y= Voltage, ylab = "Voltage", xlab = "datetime", type = "l" ))
yrange<- range(c( proj1_df1$Sub_metering_1, proj1_df1$Sub_metering_2, proj1_df1$Sub_metering_3))
plot(x=proj1_df1$Datelt,y= proj1_df1$Sub_metering_1, ylim = yrange, col = "black", type = "l", ylab ="Energy sub metering", xlab ="")
lines(x= proj1_df1$Datelt, y=proj1_df1$Sub_metering_2, type ="l", col = "red")
lines(x= proj1_df1$Datelt,y=proj1_df1$Sub_metering_3, type = "l" ,col ="blue")
legend('topright',legend= c("Sub meter 1", "Sub meter 2", "Sub meter 3"), lty= c(1,1,1), lwd =c(2,2,2), col = c("black", "red", "blue"), bty ="n")
with(proj1_df1, plot(x= Datelt, y= Global_reactive_power, type ="l", xlab = "datetime"))
dev.off
dev.off()
?file.exist
?exist.file
?file.exists
if(!file.exists("household_power_consumption.txt"){}
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", "explore_proj1.zip")
file.exists("household_power_consumption.txt")
if(!file.exists("household_power_consumption.txt"){
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", "explore_proj1.zip")
if(!file.exists("household_power_consumption.txt")){
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", "explore_proj1.zip")
unzip("explore_proj1.zip") ## yields "household_power_consumption.txt"
}
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
length(sampleTimes)
bool1 <- year(sampleTimes) == 2012
length(sampleTimes[bool1]) # 250
bool2 <- weekdays(sampleTimes)=="Monday"
str(amzn)
str(sampleTimes)
sampleTimes
amzn
View(amzn)
?write.table
write.table(amzn, "C:\\quant2\\quantmod\\amzn_dat.txt")
?write.table
write.table(amzn, "C:\\quant2\\quantmod\\amzn_dat.txt", sep ="\t")
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p<- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(ggplot2)
g<-   ggplot(movies, aes(votes, rating))
print(g)
full_data <- read.csv("household_power_consumption.txt", sep = ";", na.strings = "?")
hist(useful_data$Global_active_power, col = "Red", xlab = "Global Active Power(in kilowatts)", main = "Global Active Power")
full_data <- read.csv("household_power_consumption.txt", sep = ";", na.strings = "?")
useful_data <- subset(full_data, as.Date(full_data$Date, "%d/%m/%Y") >= as.Date("2007-02-01") & as.Date(full_data$Date, "%d/%m/%Y") <= as.Date("2007-02-02"))
useful_data <- subset(full_data, as.Date(full_data$Date, "%d/%m/%Y") >= as.Date("2007-02-01") & as.Date(full_data$Date, "%d/%m/%Y") <= as.Date("2007-02-02"))
hist(useful_data$Global_active_power, col = "Red", xlab = "Global Active Power(in kilowatts)", main = "Global Active Power")
data = read.table("household_power_consumption.txt", header = TRUE, nrows=2880, skip=66636, sep =";", colClasses = c("NULL","NULL","numeric","NULL","NULL","NULL","NULL","NULL","NULL"), na.strings = "?")
#Remove any NAs from data set.
good = complete.cases(data)
data = data[good,]
hist(data, xlab = "Global Active Power (Kilowatts)", col = "red", main = "Global Active Power")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip", "project2.zip")
getwd()
getwd()
?par
?dist
library(quantmod)
library(dplyr)
?getSymbols
library("quantmod")
#
#install.packages("FinancialInstrument")
#library("FinancialInstrument")
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
#install.packages("TTR")
library("TTR")
#######################################
Stock <- get(getSymbols('CAT'))["2014::"]
# add the indicators
Stock$BBands <- BBands(HLC(Stock))
Stock$MACD <- MACD(HLC(Stock)[,3])
Stock$stochOSC <- stoch(Stock[,c("CAT.High","CAT.Low","CAT.Close")])
Stock$position <- ifelse(Cl(Stock)>Stock$BBands & Stock$BBands >Stock$MACD & Stock$MACD > Stock$stochOSC , 1 , -1)
Gains <- lag(Stock$position) * dailyReturn(Stock)
charts.PerformanceSummary(cbind(dailyReturn(Stock),Gains))
?FinancialInstrument
library(FinancialInstrument)
?FinancialInstrument
str(Stock)
View(Stock)
charts.PerformanceSummary(cbind(dailyReturn(Stock),Gains))
View(Stock)
?PerformanceSummary
?charts.PerformanceSummary
View(dailyReturn(Stock))
View(Gains)
?PerformanceSummary
?PerformanceAnalytics
table.Stats(Stock)
table.State(Gains)
table.Stats(Gains)
?dist
?t
library(kernlab)
library(boot)
install.package(kernlab)
install.packages(kernlab)
install.packages("kernlab")
install.packages("boot")
library(knitr)
setwd("C:\\courserareproducibleresearch\\repdata-data-activity")
step_data<- read.csv("activity.csv")
# Get the total steps per day
library(dplyr)
step_data$date<- as.POSIXct(as.character(step_data$date))
sum(step_data$steps, na.rm = TRUE)
daily_totals<- step_data %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals)<- c("date", "steps")
print(daily_totals)
# Total number of days
total_number_days <- nrow(daily_totals)
# First day
first_day <- daily_totals$date[1]
# last _day
last_day <- daily_totals$date[nrow(daily_totals)]
## make a histogram 0f the number of steps taken each day
hist(daily_totals$steps, main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
## calculate and report the mean and median of the total number of steps Per day
mean_steps <- mean(daily_totals$steps)
median_steps <- median(daily_totals$steps)
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#and the average number of steps taken, averaged across all days (y-axis)
daily_intervals<- step_data %>%
group_by(interval)%>%
summarize( mean(steps, na.rm = TRUE))
colnames(daily_intervals)<- c("interval", "avg_steps")
plot(x= daily_intervals$interval, y= daily_intervals$avg_steps, type ="l")
abline(v= daily_intervals$interval[daily_intervals$avg_steps >=max(daily_intervals$avg_steps, na.rm = TRUE)], col="red")
text(150,100, "           Max at interval 835", col ="red", cex =1)
#Which 5-minute interval, on average across all the days in the dataset,
#contains the maximum number of steps?
max_avg_steps<- max(daily_intervals$avg_steps, na.rm = TRUE)
max_step_interval<- daily_intervals$interval[daily_intervals$avg_steps >=max_avg_steps]
# imputing data
#Calculate and report the total number of missing values in the dataset
#(i.e. the total number of rows with NAs)
step_data$has_na<- is.na(step_data$steps)
sum(step_data$has_na)
#Devise a strategy for filling in all of the missing values in the dataset.
#The strategy does not need to be sophisticated. For example, you could use the
#mean/median for that day, or the mean for that 5-minute interval, etc.
# Strategy to replace the missing values will be to replace the NA with
#the average for the relevant 5 minute interval
#Create a new dataset that is equal to the original dataset but with the missing
#data filled in.
step_data_2<- step_data
for(i in 1: nrow(step_data_2)){
if (is.na(step_data_2$steps[i])){
step_data_2$steps[i]<- as.numeric(daily_intervals[(daily_intervals$interval == step_data_2$interval[i]),2])
}
}
daily_totals_2<- step_data_2 %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals_2)<- c("date", "steps")
hist(daily_totals_2$steps, main = paste("Histogram of Total Steps Per Day\nNA Values Replaced with Interval Average"), xlab ="Total Steps Per Day")
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily
#number of steps?
daily_totals$version<- 'raw'
daily_totals_2$version<- 'imputed'
daily_totals_combined<- cbind(daily_totals, daily_totals_2)
hist(daily_totals$steps),xlim=c(5,18),ylim=c(0,30),breaks=10,col=rgb(1,1,0,0.7),main="",xlab="number")
par(new=TRUE)
hist(daily_totals$steps,xlim=c(5,18),ylim=c(0,30),breaks=10,col=rgb(1,1,0,0.7),main="",xlab="number")
par(new=TRUE)
hist(daily_totals_2$steps,xlim=c(5,18),ylim=c(0,30),breaks=10,col=rgb(0,1,1,0.4),main="",xlab="",ylab="")
hist(daily_totals$steps,xlim=c(5,18),ylim=c(0,30),breaks=10,col=rgb(1,1,0,0.7),main="",xlab="number")
hist(daily_totals_2$steps, main = paste("Histogram of Total Steps Per Day\nNA Values Replaced with Interval Average"), xlab ="Total Steps Per Day")
hist(daily_totals$steps)
par(new=TRUE)
hist(daily_totals_2$steps)
hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main ="")
par(new=TRUE)
hist(daily_totals_2$steps, ylim= c(0,35), breaks=5,col=rgb(0,1,1,0.4), main ="")
par(mfrow=c(1,2))
hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main ="")
#par(new=TRUE)
hist(daily_totals_2$steps, ylim= c(0,35), breaks=5,col=rgb(0,1,1,0.4), main ="")
hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
par(mfrow=c(1,1))
hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
hist(daily_totals$steps, main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
setwd("C:\\courserareproducibleresearch\\repdata-data-activity")
step_data<- read.csv("activity.csv")
# Get the total steps per day
library(dplyr)
step_data$date<- as.POSIXct(as.character(step_data$date))
sum(step_data$steps, na.rm = TRUE)
daily_totals<- step_data %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals)<- c("date", "steps")
print(daily_totals)
# Total number of days
total_number_days <- nrow(daily_totals)
# First day
setwd("C:\\courserareproducibleresearch\\repdata-data-activity")
step_data<- read.csv("activity.csv")
# Get the total steps per day
library(dplyr)
step_data$date<- as.POSIXct(as.character(step_data$date))
sum(step_data$steps, na.rm = TRUE)
daily_totals<- step_data %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals)<- c("date", "steps")
print(daily_totals)
# Total number of days
total_number_days <- nrow(daily_totals)
# First day
first_day <- daily_totals$date[1]
# last _day
last_day <- daily_totals$date[nrow(daily_totals)]
#hist(daily_totals$steps, main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
par(mfrow=c(1,1))
hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
## calculate and report the mean and median of the total number of steps Per day
mean_steps <- mean(daily_totals$steps)
median_steps <- median(daily_totals$steps)
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#and the average number of steps taken, averaged across all days (y-axis)
daily_intervals<- step_data %>%
group_by(interval)%>%
summarize( mean(steps, na.rm = TRUE))
colnames(daily_intervals)<- c("interval", "avg_steps")
plot(x= daily_intervals$interval, y= daily_intervals$avg_steps, type ="l")
abline(v= daily_intervals$interval[daily_intervals$avg_steps >=max(daily_intervals$avg_steps, na.rm = TRUE)], col="red")
text(150,100, "           Max at interval 835", col ="red", cex =1)
#Which 5-minute interval, on average across all the days in the dataset,
#contains the maximum number of steps?
max_avg_steps<- max(daily_intervals$avg_steps, na.rm = TRUE)
max_step_interval<- daily_intervals$interval[daily_intervals$avg_steps >=max_avg_steps]
# imputing data
#Calculate and report the total number of missing values in the dataset
#(i.e. the total number of rows with NAs)
step_data$has_na<- is.na(step_data$steps)
sum(step_data$has_na)
#Devise a strategy for filling in all of the missing values in the dataset.
#The strategy does not need to be sophisticated. For example, you could use the
#mean/median for that day, or the mean for that 5-minute interval, etc.
# Strategy to replace the missing values will be to replace the NA with
#the average for the relevant 5 minute interval
#Create a new dataset that is equal to the original dataset but with the missing
#data filled in.
step_data_2<- step_data
for(i in 1: nrow(step_data_2)){
if (is.na(step_data_2$steps[i])){
step_data_2$steps[i]<- as.numeric(daily_intervals[(daily_intervals$interval == step_data_2$interval[i]),2])
}
}
#Make a histogram of the total number of steps taken each day and Calculate and
#report the mean and median total number of steps taken per day.
daily_totals_2<- step_data_2 %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals_2)<- c("date", "steps")
hist(daily_totals_2$steps, main = paste("Histogram of Total Steps Per Day\nNA Values Replaced with Interval Average"), xlab ="Total Steps Per Day")
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily
#number of steps?
daily_totals$version<- 'raw'
daily_totals_2$version<- 'imputed'
daily_totals_combined<- cbind(daily_totals, daily_totals_2)
#hist(daily_totals$steps,xlim=c(5,18),ylim=c(0,35),breaks=10,col=rgb(1,1,0,0.7),main="",xlab="number")
par(mfrow=c(1,2))
hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main ="")
#par(new=TRUE)
hist(daily_totals_2$steps, ylim= c(0,35), breaks=5,col=rgb(0,1,1,0.4), main ="")
#hist(daily_totals_2$steps,xlim=c(5,18),ylim=c(0,35),breaks=5,col=rgb(0,1,1,0.4),main="",xlab="",ylab="")
Summary(hist(daily_totals$steps))
daily_total_hist<- hist(daily_totals$steps, breaks =5)
daily_totals_hist<- hist(daily_totals$steps, breaks =5)
daily_totals_hist$count
daily_totals_2_hist<- hist(daily_totals_2$steps, breaks =5)
daily_totals_2_hist$count
daily_totals_hist<- hist(daily_totals$steps, breaks =5)
par(mfrow=c(1,2))
#hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main ="")
daily_totals_hist<- hist(daily_totals$steps, breaks =5)
daily_totals_hist$count
#par(new=TRUE)
#hist(daily_totals_2$steps, ylim= c(0,35), breaks=5,col=rgb(0,1,1,0.4), main ="")
daily_totals_2_hist<- hist(daily_totals_2$steps, breaks =5)
daily_totals_2_hist$count
quantiles<- c(1:5)
with_NA_values<- daily_totals_hist$count
with_imputed_values<- daily_totals_2_hist$count
comparison<- dataframe(quantiles, with_NA_values, with_imputed_values)
comparison<- data.frame(quantiles, with_NA_values, with_imputed_values)
comparison
unzip("activity.zip")
?unzip
getwd()
file.exists("activity.zip")
ls
list.files
dir
list.files()
getwd()
setwd("C:\\courserareproducibleresearch\\repdata_data_PeerAssessment1")
setwd("C:\\courserareproducibleresearch\\Repdata_PeerAssessment1")
getwd()
file.exists("activity.zip")
if(!file.exists("activity.csv")) unzip("activity.zip")
step_data<- read.csv("activity.csv")
setwd("C:\\courserareproducibleresearch\\Repdata_PeerAssessment1")
getwd()
if(!file.exists("activity.csv")) unzip("activity.zip")
step_data<- read.csv("activity.csv")
# Get the total steps per day
library(dplyr)
step_data$date<- as.POSIXct(as.character(step_data$date))
sum(step_data$steps, na.rm = TRUE)
library(dplyr)
daily_totals<- step_data %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals)<- c("date", "steps")
print(daily_totals)
View(daily_totals)
sum(daily_totals$steps)
mean(daily_totals$steps)
?weekdays
head(daily_totals_2)
weekdays(daily_totals_2$date)
daily_totals_2$weekday<- weekday(daily_totals_2$date`
)
daily_totals_2$weekday<- weekday(daily_totals_2$date)
daily_totals_2$weekday<- weekdays(daily_totals_2$date)
View(daily_totals_2)
daily_totals_2$weekday<- if(weekdays(daily_totals_2$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")
daily_totals_2$weekday<- if(weekdays(daily_totals_2$date) %in% c("Saturday", "Sunday"), "Weekend" else "Weekday")
daily_totals_2$weekday<- if(weekdays(daily_totals_2$date) %in% c("Saturday", "Sunday")), "Weekend" else "Weekday")
daily_totals_2$weekday<- if(weekdays(daily_totals_2$date) %in% c("Saturday", "Sunday")) "Weekend" else "Weekday"
daily_totals_2$weekday<- ifelse(weekdays(daily_totals_2$date) %in% c("Saturday", "Sunday")) "Weekend" ,"Weekday"
daily_totals_2$weekday<- ifelse(weekdays(daily_totals_2$date) %in% c("Saturday", "Sunday"), "Weekend" ,"Weekday")
View(daily_totals_2)
daily_totals_2$whatday<- weekdays(daily_totals_2$date)
daily_totals_2$weekday<- ifelse(weekdays(daily_totals_2$date) %in% c("Saturday", "Sunday"), "Weekend" ,"Weekday")
View(daily_totals_2)
View(step_data_2)
step_data_2$weekday<- ifelse(weekdays(step_data_2$date) %in% c("Saturday", "Sunday"), "Weekend" ,"Weekday")
daily_intervals_2<- step_data_2 %>%
group_by(interval)%>%
summarize( mean(steps, na.rm = TRUE))
colnames(daily_intervals)<- c("interval", "avg_steps")
plot(x= daily_intervals$interval, y= daily_intervals$avg_steps, type ="l")
abline(v= daily_intervals$interval[daily_intervals$avg_steps >=max(daily_intervals$avg_steps, na.rm = TRUE)], col="red")
par(mfrow = c(2,1)
plot(x= daily_intervals$interval, y= daily_intervals$avg_steps, type ="l")
abline(v= daily_intervals$interval[daily_intervals$avg_steps >=max(daily_intervals$avg_steps, na.rm = TRUE)], col="red")
daily_intervals_2<- step_data_2 %>%
group_by(interval)%>%
summarize( mean(steps, na.rm = TRUE))
colnames(daily_intervals_2)<- c("interval", "avg_steps")
par(mfrow = c(2,1)
plot(x= daily_intervals_2$interval, y= daily_intervals_2$avg_steps, type ="l")
daily_intervals_2<- step_data_2 %>%
group_by(interval)%>%
summarize( mean(steps, na.rm = TRUE))
colnames(daily_intervals_2)<- c("interval", "avg_steps")
View(daily_intervals_2)
setwd("C:\\courserareproducibleresearch\\Repdata_PeerAssessment1")
getwd()
if(!file.exists("activity.csv")) unzip("activity.zip")
step_data<- read.csv("activity.csv")
# Get the total steps per day
library(dplyr)
step_data$date<- as.POSIXct(as.character(step_data$date))
sum(step_data$steps, na.rm = TRUE)
library(dplyr)
daily_totals<- step_data %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals)<- c("date", "steps")
print(daily_totals)
View(daily_totals)
mean(daily_totals$steps)
# Total number of days
total_number_days <- nrow(daily_totals)
# First day
first_day <- daily_totals$date[1]
# last _day
last_day <- daily_totals$date[nrow(daily_totals)]
## make a histogram 0f the number of steps taken each day
#
#hist(daily_totals$steps, main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
par(mfrow=c(1,1))
hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main = paste("Histogram of Total Steps Per Day"), xlab ="Total Steps Per Day")
## calculate and report the mean and median of the total number of steps Per day
mean(daily_totals$steps)
```
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#and the average number of steps taken, averaged across all days (y-axis)
daily_intervals<- step_data %>%
group_by(interval)%>%
summarize( mean(steps, na.rm = TRUE))
colnames(daily_intervals)<- c("interval", "avg_steps")
plot(x= daily_intervals$interval, y= daily_intervals$avg_steps, type ="l")
abline(v= daily_intervals$interval[daily_intervals$avg_steps >=max(daily_intervals$avg_steps, na.rm = TRUE)], col="red")
text(150,100, "           Max at interval 835", col ="red", cex =1)
#Which 5-minute interval, on average across all the days in the dataset,
#contains the maximum number of steps?
max_avg_steps<- max(daily_intervals$avg_steps, na.rm = TRUE)
max_step_interval<- daily_intervals$interval[daily_intervals$avg_steps >=max_avg_steps]
# imputing data
#Calculate and report the total number of missing values in the dataset
#(i.e. the total number of rows with NAs)
step_data$has_na<- is.na(step_data$steps)
sum(step_data$has_na)
#Devise a strategy for filling in all of the missing values in the dataset.
#The strategy does not need to be sophisticated. For example, you could use the
#mean/median for that day, or the mean for that 5-minute interval, etc.
# Strategy to replace the missing values will be to replace the NA with
#the average for the relevant 5 minute interval
#Create a new dataset that is equal to the original dataset but with the missing
#data filled in.
step_data_2<- step_data
for(i in 1: nrow(step_data_2)){
if (is.na(step_data_2$steps[i])){
step_data_2$steps[i]<- as.numeric(daily_intervals[(daily_intervals$interval == step_data_2$interval[i]),2])
}
}
#Make a histogram of the total number of steps taken each day and Calculate and
#report the mean and median total number of steps taken per day.
daily_totals_2<- step_data_2 %>%
group_by(date)%>%
summarize( sum(steps, na.rm = TRUE))
colnames(daily_totals_2)<- c("date", "steps")
hist(daily_totals_2$steps, main = paste("Histogram of Total Steps Per Day\nNA Values Replaced with Interval Average"), xlab ="Total Steps Per Day")
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily
#number of steps?
daily_totals$version<- 'raw'
daily_totals_2$version<- 'imputed'
daily_totals_combined<- cbind(daily_totals, daily_totals_2)
#hist(daily_totals$steps,xlim=c(5,18),ylim=c(0,35),breaks=10,col=rgb(1,1,0,0.7),main="",xlab="number")
par(mfrow=c(1,2))
#hist(daily_totals$steps, ylim= c(0,35),breaks=5,col=rgb(1,1,0,0.7), main ="")
daily_totals_hist<- hist(daily_totals$steps, breaks =5)
#daily_totals_hist$count
#par(new=TRUE)
#hist(daily_totals_2$steps, ylim= c(0,35), breaks=5,col=rgb(0,1,1,0.4), main ="")
daily_totals_2_hist<- hist(daily_totals_2$steps, breaks =5)
#daily_totals_2_hist$count
quantiles<- c(1:5)
with_NA_values<- daily_totals_hist$count
with_imputed_values<- daily_totals_2_hist$count
comparison<- data.frame(quantiles, with_NA_values, with_imputed_values)
comparison
## difference in weekday or weekend
step_data_2$weekday<- ifelse(weekdays(step_data_2$date) %in% c("Saturday", "Sunday"), "Weekend" ,"Weekday")
View(step_data_2)
step_data_2$weekday<- ifelse(weekdays(step_data_2$date) %in% c("Saturday", "Sunday"), "Weekend" ,"Weekday")
daily_intervals_2<- step_data_2 %>%
group_by(weekday,interval)%>%
summarize( mean(steps, na.rm = TRUE))
colnames(daily_intervals_2)<- c("interval", "avg_steps")
par(mfrow = c(2,1)
plot(x= daily_intervals_2$interval, y= daily_intervals_2$avg_steps, type ="l")
View(daily_intervals_2)
View(daily_intervals_2)
colnames(daily_intervals_2)<- c("weekday", "interval", avg_steps)
colnames(daily_intervals_2)<- c("weekday", "interval", "avg_steps")
#par(mfrow = c(2,1))
library(lattice)
xyplot(avg_steps ~ interval, daily_intervals_2)
?xyplot
xyplot(avg_steps ~ weekday+interval, daily_intervals_2, type = "l")
xyplot(avg_steps ~ interval, daily_intervals_2, type = "l")
xyplot(avg_steps ~ interval, daily_intervals_2,groups = weekday, type = "l")
xyplot(avg_steps ~ interval |weekday, daily_intervals_2, type = "l")
xyplot(avg_steps ~ interval |weekday, daily_intervals_2, layout = c(1,2), type = "l")
xyplot(avg_steps ~ interval |weekday, daily_intervals_2, layout = c(1,2), type = "l")
library(lattice)
xyplot(avg_steps ~ interval |weekday, daily_intervals_2, layout = c(1,2), type = "l")
xyplot(avg_steps ~ interval |weekday, daily_intervals_2, layout = c(1,2), type = "l". ylab = "Avg. Steps in Interval")
xyplot(avg_steps ~ interval |weekday, daily_intervals_2, layout = c(1,2), type = "l", ylab = "Avg. Steps in Interval")
